package com.cts.project.tables.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;

import com.cts.project.bookkeeping.TablesApplication;
import com.cts.project.bookkeeping.entities.Users;
import com.cts.project.bookkeeping.exception.DuplicateUserException;
import com.cts.project.bookkeeping.exception.UserNotFoundException;
import com.cts.project.bookkeeping.model.LoginModel;
import com.cts.project.bookkeeping.model.PasswordChange;
import com.cts.project.bookkeeping.model.UserModel;
import com.cts.project.bookkeeping.repository.AccountRepository;
import com.cts.project.bookkeeping.repository.UsersRepository;
import com.cts.project.bookkeeping.service.UsersService;
import com.cts.project.bookkeeping.tools.PasswordHashing;


@RunWith(MockitoJUnitRunner.class)
@SpringBootTest(classes = TablesApplication.class)
@DirtiesContext
class UsersServiceTest {

	
	@Mock
	UsersRepository uRepo;
	@Mock
	AccountRepository aRepo;
	@InjectMocks
	UsersService uS;
	
	@Autowired
	PasswordHashing pH;
	
	private UserModel u;
	private LoginModel login;
	private PasswordChange pass;
	private Users user;
	@BeforeEach
	public void setup() {
		u = new UserModel("John", "john123", "password", "john@gmail.com", "New Company");
		login = new LoginModel("john123", "password");
		pass = new PasswordChange("password", "password2");
		user = new Users(u.getName(), u.getUsername(), u.getPassword(), u.getEmail(), u.getCompanyName());
		
	}

	@Test
	 void testRegisterUser() throws DuplicateUserException {
		
		when(uRepo.findByEmail(u.getEmail())).thenReturn(new ArrayList<Users>());
		when(uRepo.save(any(Users.class))).thenReturn(user);
		Users user1 = uS.registerUser(u);
		assertEquals(user, user1);
	}
	
	@Test
	 void testDuplicateUserExcption() throws DuplicateUserException {
		List<Users> duplicate = new ArrayList<>();
		duplicate.add(user);
		when(uRepo.findByEmail(u.getEmail())).thenReturn(duplicate);
		assertThrows(DuplicateUserException.class,() ->uS.registerUser(u));
		
	}
	
	@Test
	 void testLogin_LoginSuccess() {
		List<Users>userByUsername = List.of(user);
		when(uRepo.findByUsername(u.getUsername())).thenReturn(userByUsername);
		when(PasswordHashing.hashPassword(anyString())).thenReturn("password");
		assertEquals("login success", uS.login(login));
		
	}
	
	@Test
	 void testLogin_UserNotFound() {
		
		when(uRepo.findByUsername(u.getUsername())).thenReturn(new ArrayList<>());
		assertThrows(UserNotFoundException.class,()-> uS.login(login));
		
	}
	
	@Test
	 void testLogin_Invalid() {
		List<Users>userByUsername = List.of(user);
		when(uRepo.findByUsername(u.getUsername())).thenReturn(userByUsername);
		login.setPassword("pass");
		assertEquals("Invalid credentials", uS.login(login));
		
	}
	
	@Test
	 void testupdatePassword_success() {
		when(uRepo.findByEmail(u.getEmail())).thenReturn(List.of(user));
		assertEquals("Password Changed", uS.updatePassword(u.getEmail(),pass));
	}
	
	@Test
	 void testupdatePassword_usernotfound() {
		when(uRepo.findByEmail("email")).thenReturn(List.of());
		assertThrows(UserNotFoundException.class,()-> uS.updatePassword("email",pass));
	}
	
	@Test
	 void testupdatePassword_failed() {
		when(uRepo.findByEmail(u.getEmail())).thenReturn(List.of(user));
		pass.setOldPass("password1");
		assertEquals("Password do not match", uS.updatePassword(u.getEmail(),pass));
	}
	
	@Test
	 void testGetUserById_UserFound() {
		when(uRepo.findById(anyString())).thenReturn(Optional.of(user));
		Users user1 = uS.getUserById(anyString());
		assertEquals(user, user1);
	}
	
	@Test
	 void testGetUserById_NotFound() {
		when(uRepo.findById(anyString())).thenReturn(Optional.empty());
		assertThrows(UserNotFoundException.class,()-> uS.getUserById("1"));
	}
	
	@Test
	 void testUpdateUserById_success() {
		when(uRepo.findById(anyString())).thenReturn(Optional.of(user));
		when(uRepo.save(user)).thenReturn(user);
		u.setName("John Doe");
		u.setEmail("johndoe@email.com");
		u.setUsername("johndoe123");
		Users user1 = uS.updateUserById(u, anyString());
		assertEquals(u.getName(), user1.getName());
	}
	
	@Test
	 void testUpdateUserById_UsersNotFound() {
		when(uRepo.findById(anyString())).thenReturn(Optional.empty());
		assertThrows(UserNotFoundException.class,()-> uS.updateUserById(u, "1"));
		
	}
}
