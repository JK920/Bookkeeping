package com.cts.project.tables.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.apache.catalina.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;

import com.cts.project.bookkeeping.TablesApplication;
import com.cts.project.bookkeeping.entities.Account;
import com.cts.project.bookkeeping.entities.Customers;
import com.cts.project.bookkeeping.entities.Invoice;
import com.cts.project.bookkeeping.entities.Journal;
import com.cts.project.bookkeeping.entities.Ledger;
import com.cts.project.bookkeeping.entities.Users;
import com.cts.project.bookkeeping.entities.Vendors;
import com.cts.project.bookkeeping.exception.JournalNotFoundException;
import com.cts.project.bookkeeping.exception.UserNotFoundException;
import com.cts.project.bookkeeping.model.AccountType;
import com.cts.project.bookkeeping.model.JournalModel;
import com.cts.project.bookkeeping.repository.JournalRepository;
import com.cts.project.bookkeeping.repository.LedgerRepository;
import com.cts.project.bookkeeping.service.AccountService;
import com.cts.project.bookkeeping.service.CustomersService;
import com.cts.project.bookkeeping.service.InvoiceService;
import com.cts.project.bookkeeping.service.JournalService;
import com.cts.project.bookkeeping.service.UsersService;
import com.cts.project.bookkeeping.service.VendorsService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RunWith(MockitoJUnitRunner.class)
@SpringBootTest(classes = TablesApplication.class)
@DirtiesContext
class JournalServiceTest {


	@Mock
	JournalRepository jR;
	@Mock
	LedgerRepository lR;
	@Mock
	UsersService uS;
	@Mock
	AccountService aS;
	@Mock
	CustomersService cS;
	@Mock
	VendorsService vS;
	@Mock
	InvoiceService iS;
	@InjectMocks
	JournalService jS;

	private JournalModel jm;
	private Users u;
	private Account a;
	private Account a2;
	private Customers c;
	private Vendors v;
	private Invoice i;
	private Journal j;
	private Ledger l;
	private List<Journal> jL = new ArrayList<>();
	@BeforeEach
	public void setup() {
		log.info("1");
		u = new Users("User", "username", "pass", "email", "company");
		log.info("1");
		u.setUserId("u1");
		log.info("1");
		a = new Account("a", AccountType.ASSET, 0);
		log.info("1");
		a.setAccountId("a1");
		log.info("1");
		a2 = new Account("a2", AccountType.EQUITY, 0);
		log.info("1");
		c = new Customers(u, "Sam", "Cochin", "987654321","sam@email.com");
		log.info("1");
		c.setCustomerId("c");
		log.info("1");
		v = new Vendors(u, "Ram", "Cochin", "987654321","ram@email.com");
		log.info("1");
		v.setVendorId("v");
		log.info("1");
		i= new Invoice("i1", u, LocalDate.now(), LocalDate.now(), u.getCompanyName(), c.getName(), 0, 0, false);
		log.info("1");
		j = new Journal(LocalDate.now(), "", "", 0, 0);
		log.info("1");
		j.setJournalId("j1");
		log.info("1");
		j.setUser(u);
		log.info("1");
		j.setAccount(a);
		log.info("1");
		j.setInvoice(i);
		log.info("1");
		l = new Ledger();
		log.info("1");
		l.setAccount(a);
		log.info("1");
		l.setJournal(j);
		log.info("1");
		jL.add(j);
		log.info("1");
		u.setJournalList(jL);
		log.info("1");
		
	}
	
	@Test
	void testCreateJournal_CustomerModel() throws RuntimeException {
		j.setCustomer(c);
		jm = new JournalModel(u.getUserId(), LocalDate.now(), a.getAccountName(), "", "", i.getInvoiceId(), "", c.getName(), 0, 0);
		when(uS.getUserById("u1")).thenReturn(u);
		when(aS.getAccountByName("a", "u")).thenReturn(a);
		when(cS.getCustomerByName("Sam", "u")).thenReturn(c);
		when(iS.getInvoiceById("i1", "u1")).thenReturn(i);
		when(jR.save(any(Journal.class))).thenReturn(j);
		Journal j1 = jS.createJournalEntry(jm);
		assertEquals(j, j1);
	}
	
	@Test
	void testCreateJournal_VendorModel() throws RuntimeException  {
		j.setVendor(v);
		jm = new JournalModel(u.getUserId(), LocalDate.now(), a.getAccountName(), "", "", i.getInvoiceId(), v.getName(), "", 0, 0);
		when(uS.getUserById("u1")).thenReturn(u);
		when(aS.getAccountByName("a", "u")).thenReturn(a);
		when(vS.getVendorByName("Ram", "u1")).thenReturn(v);
		when(iS.getInvoiceById("i1", "u1")).thenReturn(i);
		when(jR.save(any(Journal.class))).thenReturn(j);
		Journal j1 = jS.createJournalEntry(jm);
		assertEquals(j, j1);
	}
	
	@Test
	void testCreateJournal_NotFound() throws RuntimeException  {
		j.setVendor(v);
		jm = new JournalModel(u.getUserId(), LocalDate.now(), a.getAccountName(), "", "", i.getInvoiceId(), v.getName(), "", 0, 0);
		when(uS.getUserById("u1")).thenThrow(UserNotFoundException.class);
		when(aS.getAccountByName("a", "u")).thenReturn(a);
		when(vS.getVendorByName("Ram", "u1")).thenReturn(v);
		when(iS.getInvoiceById("i1", "u1")).thenReturn(i);
		when(jR.save(any(Journal.class))).thenReturn(j);
		assertThrows(UserNotFoundException.class, ()-> jS.createJournalEntry(jm));
	}
	
	@Test
	void testGetJournalById() throws JournalNotFoundException{
		when(uS.getUserById("u1")).thenReturn(u);
		assertEquals(j, jS.getJournalById("j1", "u1"));
		
	}
	
	@Test
	void testGetJournalById_JournalNotFound() throws JournalNotFoundException{
		when(uS.getUserById("u1")).thenReturn(u);
		assertThrows(JournalNotFoundException.class, ()-> jS.getJournalById("j2", "u1"));
		
	}
	
	@Test
	void testGetJournalOfUsers() throws JournalNotFoundException{
		when(uS.getUserById("u1")).thenReturn(u);
		assertEquals(jL, jS.getJournalsOfUser("u1"));
		
	}
	
	@Test
	void testGetJournalOfUsers_UserNotFound() throws UserNotFoundException{
		when(uS.getUserById("u1")).thenThrow(UserNotFoundException.class);
		assertThrows(UserNotFoundException.class, ()-> jS.getJournalsOfUser("u1"));
		
	}
	
	@Test
	void testModifyJournal() throws RuntimeException{
		j.setLedger(l);
		jm = new JournalModel(u.getUserId(), LocalDate.now(), a2.getAccountName(), "", "", i.getInvoiceId(), "", c.getName(), 0, 0);
		Journal j2 = j;
		j2.setAccount(a2);
		j2.setCustomer(c);
		
		when(uS.getUserById("u1")).thenReturn(u);
		when(aS.getAccountByName("a", "u")).thenReturn(a);
		when(cS.getCustomerByName("Sam", "u")).thenReturn(c);
		when(iS.getInvoiceById("i1", "u1")).thenReturn(i);
		when(jR.save(any(Journal.class))).thenReturn(j2);
		
		assertEquals(j2, jS.modifyJournal(jm, "j1"));
		verify(aS,times(1)).updateAccountBalance(any(Journal.class));
		verify(lR,times(1)).save(any(Ledger.class));
		
		
	}
	@Test
	void testModifyJournal_NotFound() throws RuntimeException{
		j.setLedger(l);
		jm = new JournalModel(u.getUserId(), LocalDate.now(), a2.getAccountName(), "", "", i.getInvoiceId(), "", c.getName(), 0, 0);
		Journal j2 = j;
		j2.setAccount(a2);
		j2.setCustomer(c);
		
		when(uS.getUserById("u1")).thenThrow(UserNotFoundException.class);
		when(aS.getAccountByName("a", "u")).thenReturn(a);
		when(cS.getCustomerByName("Sam", "u")).thenReturn(c);
		when(iS.getInvoiceById("i1", "u1")).thenReturn(i);
		when(jR.save(any(Journal.class))).thenReturn(j2);
		
		verify(aS,times(0)).updateAccountBalance(any(Journal.class));
		verify(lR,times(0)).save(any(Ledger.class));
		assertThrows(UserNotFoundException.class,()-> jS.modifyJournal(jm, "j1"));
		
	}
	
	@Test
	void testDeleteJournalEntry() {
		log.info("2");
		j.setLedger(l);
		log.info("2");
		when(uS.getUserById("u1")).thenReturn(u);
		log.info("2");
		jS.deleteJournalEntry("j1", "u1");
		log.info("2");
		verify(aS,times(0)).updateAccountBalanceForJournalDeletion(j);
		verify(lR,times(1)).delete(l);
		verify(jR,times(1)).delete(j);
	}
}
