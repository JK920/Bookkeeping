package com.cts.project.tables.controller;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.cts.project.bookkeeping.TablesApplication;
import com.cts.project.bookkeeping.controller.JournalsController;
import com.cts.project.bookkeeping.entities.Journal;
import com.cts.project.bookkeeping.model.InvoiceModel;
import com.cts.project.bookkeeping.model.JournalModel;
import com.cts.project.bookkeeping.service.JournalService;
import com.fasterxml.jackson.databind.ObjectMapper;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = TablesApplication.class)
@AutoConfigureMockMvc
class JournalControllerTest {

	@Autowired
	private MockMvc mockMvc;

	
	@Autowired
    private ObjectMapper objectMapper;
	
	@MockBean
	private JournalService jS;
	
	@InjectMocks
	JournalsController jC;
	
	private JournalModel jm;
	private Journal j;
	@BeforeEach
	void setUp() throws Exception {
		jm = new JournalModel();
		j = new Journal();
	}

	@Test
	void testCreateJournalEntry() throws Exception {
		
		when(jS.createJournalEntry(jm)).thenReturn(j);
		String exp = objectMapper.writeValueAsString(j);
		RequestBuilder requestBuilder = MockMvcRequestBuilders
				.post("/create/journal")
				.accept(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(jm))
				.contentType(MediaType.APPLICATION_JSON);
		
		MvcResult result = mockMvc.perform(requestBuilder).andReturn();
		
		MockHttpServletResponse response = result.getResponse();
		String actual = response.getContentAsString();
		assertEquals(200, response.getStatus());
		assertEquals(exp, actual);
	}

}
