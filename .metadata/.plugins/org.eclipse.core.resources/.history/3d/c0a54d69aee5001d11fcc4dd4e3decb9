package com.restaurant.exception;


import java.time.LocalDate;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import lombok.extern.slf4j.Slf4j;



@ControllerAdvice
@RestController
@Slf4j
public class CustomizedResponseEntityExceptionHandler extends ResponseEntityExceptionHandler {


	@ExceptionHandler
	public final ResponseEntity<Object> handleAllExceptions(Exception ex, WebRequest request) {

		ExceptionResponse eR = new ExceptionResponse(LocalDate.now(),ex.getMessage()
				,request.getDescription(false),HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase());
		log.error(ex.getMessage());
		return new ResponseEntity<>(eR,HttpStatus.INTERNAL_SERVER_ERROR);
	}


	@ExceptionHandler
	public final ResponseEntity<ExceptionResponse> handleNotFoundException(BookTableInvalidException ex, WebRequest request) {
		ExceptionResponse eR = new ExceptionResponse(LocalDate.now(),ex.getMessage()
				,request.getDescription(false),HttpStatus.NOT_FOUND.getReasonPhrase());
		log.error(ex.getMessage());
		return new ResponseEntity<>(eR,HttpStatus.NOT_FOUND);
	}

	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {
		
		String details="";
		for(ObjectError error: ex.getBindingResult().getAllErrors()) {
			details+=error.getDefaultMessage()+",";
		}
		ExceptionResponse eR = new ExceptionResponse(LocalDate.now(),"validation fails "+details 
				,request.getDescription(false),HttpStatus.BAD_REQUEST.getReasonPhrase());
		log.error(details);
		return new ResponseEntity<>(er,HttpStatus.BAD_REQUEST);
	}



}


